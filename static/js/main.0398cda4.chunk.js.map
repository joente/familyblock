{"version":3,"sources":["serviceWorker.js","AnimateMoveUp.js","AnimateMerge.js","Cell.js","Highlight.js","Grid.js","Tile.js","Tiles.js","Score.js","index.js","Game.js"],"names":["Boolean","window","location","hostname","match","AnimateMoveUp","state","tile","toCell","unit","move","target","speed","normalize","getYpos","size","width","height","animate","container","position","y","setTile","AnimateMerge","withCell","direction","getXpos","console","log","done","x","remove","nextTile","Cell","stage","pos","col","row","cellTexture","bg","PIXI","cellpos","animation","addChild","resize","visible","isEmpty","hide","newTile","getValue","value","getIndex","index","getTile","moveTileUp","mergeTile","parent","Highlight","offset","ok","nok","sprite","update","newCol","newSprite","Grid","score","tiles","w","h","cells","from","okTexture","nokTexture","highlight","isAnimating","push","lastRow","rows","forEach","cell","colOnGrid","mpos","Math","floor","colOkNok","undefined","select","getScore","reduce","total","cellsToAnimate","colsMoved","Array","fill","processGrid","length","toList","r","i","n","cellsToCheck","ce","cols","final","cb","addTile","Tile","allTiles","str","color","blur","BlurFilter","graphics","filters","style","fontFamily","fontSize","fontWeight","align","stroke","strokeThickness","lineJoin","text","isSmall","clear","lineStyle","beginFill","drawRoundedRect","endFill","dupTile","removeChild","Tiles","numTiles","rasterTexture","currentRaster","nextRaster","randColor","random","toString","padStart","current","next","normalizeTiles","renderTiles","mi","idx","getRandomTile","getCurrentTile","stealCurrentTile","Score","fontStyle","toLocaleString","game","app","innerWidth","innerHeight","appendChild","view","renderer","display","backgroundColor","autoResize","interactive","placeTile","grid","on","event","data","getLocalPosition","ww","wh","requestAnimationFrame","render","Game","document","body","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message","addEventListener"],"mappings":"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","file":"static/js/main.0398cda4.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const AnimateMoveUp = (state) => {\n    const {tile, toCell, unit} = state;\n\n    let move = {\n        target: 0,\n        speed: -1,\n    }\n\n    const normalize = () => {\n        move.target = toCell.getYpos();\n        move.speed = -5.0*unit.size;\n        tile.width = 10*unit.size;\n        tile.height = 10*unit.size;\n    }\n\n    normalize();\n\n    const animate = () => {\n        tile.container.position.y += move.speed;\n        if (tile.container.position.y <= move.target) {\n            toCell.setTile(tile);\n            return true;  // finished\n        }\n        return false;  // not finished\n    }\n    return {\n        animate,\n        normalize,\n    };\n}\n\nexport default AnimateMoveUp;","const AnimateMerge = (state) => {\n    const {tile, withCell, direction, unit} = state;\n\n    let move = {\n        target: 0,\n        speed: 0,\n    }\n\n    const normalize = () => {\n        switch (direction) {\n        case \"up\":\n            move.target = withCell.getYpos();\n            break;\n        case \"right\":\n        case \"left\":\n            move.target = withCell.getXpos();\n            break;\n        default:\n            console.log(\"unknown direction: \", direction);\n        }\n\n        move.speed = 1*unit.size;\n        tile.width = 10*unit.size;\n        tile.height = 10*unit.size;\n    }\n\n    normalize();\n\n    const animate = () => {\n        let done = false;\n\n        switch (direction) {\n        case \"up\":\n            tile.container.position.y += move.speed;\n            done = tile.container.position.y >= move.target;\n            break;\n        case \"right\":\n            tile.container.position.x += move.speed;\n            done = tile.container.position.x >= move.target;\n            break;\n        case \"left\":\n            tile.container.position.x -= move.speed;\n            done = tile.container.position.x <= move.target;\n            break;\n        default:\n            console.log(\"unknown direction: \", direction);\n        }\n        if (done) {\n            tile.remove();\n            withCell.nextTile();\n            return true;  // finished\n        }\n        return false;  // not finished\n    }\n    return {\n        animate,\n        normalize,\n    };\n}\n\nexport default AnimateMerge;","import * as PIXI from \"pixi.js\";\nimport AnimateMoveUp from \"./AnimateMoveUp\";\nimport AnimateMerge from \"./AnimateMerge\";\n\n\nconst Cell = (state) => {\n    const {stage, pos, unit, col, row, cellTexture} = state;\n    const bg = new PIXI.Sprite(cellTexture);\n    const cellpos = {x: 0, y: 0, size: 0};\n\n    let tile = null;\n    let animation = null;\n\n    const normalize = () => {\n        cellpos.x = pos.x + unit.size*10*col;\n        cellpos.y = pos.y + unit.size*10*row;\n        cellpos.size = 10*unit.size;\n\n        if (bg.visible) {\n            bg.position.x = cellpos.x;\n            bg.position.y = cellpos.y;\n            bg.width = bg.height = cellpos.size;\n        }\n\n        if (tile !== null) {\n            tile.container.position.x = cellpos.x;\n            tile.container.position.y = cellpos.y;\n            tile.normalize();\n        }\n\n        if (animation !== null) {\n            animation.normalize();\n        }\n    }\n\n    stage.addChild(bg);\n\n    return {\n        col,\n        row,\n        resize: normalize,\n        isEmpty: () => tile === null,\n        hide: () => bg.visible = false,\n        setTile: (newTile) => {\n            if (tile) {\n                tile.remove();\n            }\n            tile = newTile;\n            tile.container.position.x = cellpos.x;\n            tile.container.position.y = cellpos.y;\n        },\n        animate: () => {\n            if (animation) {\n                if (animation.animate() === true) {\n                    animation = null;  // finished;\n                }\n            }\n            return animation === null;  // true when finished or nothing to animate\n        },\n        getValue: () => tile === null ? 0 : tile.value,\n        getIndex: () => tile === null ? null : tile.index,\n        getXpos: () => pos.x + unit.size*10*col,\n        getYpos: () => pos.y + unit.size*10*row,\n        getTile: () => tile,\n        moveTileUp: (toCell) => {\n            animation = AnimateMoveUp({toCell, tile, unit});\n            tile = null;\n        },\n        mergeTile: (withCell, direction) => {\n            animation = AnimateMerge({withCell, direction, tile, unit});\n            tile = null;\n        },\n        nextTile: () => {\n            const nextTile = tile.nextTile();\n            tile.container.parent.addChild(nextTile.container);\n            tile.remove();\n            tile = nextTile;\n            tile.container.position.x = cellpos.x;\n            tile.container.position.y = cellpos.y;\n        }\n    }\n};\n\nexport default Cell;","const Highlight = (state) => {\n    const {offset, ok, nok, unit} = state;\n\n    let sprite = ok;\n    let col = null;\n\n    const normalize = () => {\n        if (col === null) {\n            ok.visible = false;\n            nok.visible = false;\n            return;\n        }\n        sprite.visible = true;\n        sprite.position.x = offset.x + 4*unit.size + col*10*unit.size;\n        sprite.position.y = offset.y + 9*unit.size;\n        sprite.width = 12*unit.size;\n        sprite.height = 72*unit.size;\n    }\n\n    return {\n        normalize,\n        update: (newCol, newSprite) => {\n            col = newCol;\n            if (sprite) {\n                sprite.visible = false;\n            }\n            sprite = newSprite;\n            normalize();\n        }\n    };\n};\n\nexport default Highlight;","import * as PIXI from \"pixi.js\";\nimport Cell from \"./Cell\";\nimport Highlight from \"./Highlight\";\n\n\nconst Grid = (state) => {\n    const {offset, stage, unit, score, tiles} = state;\n    const pos = {x: 0, y: 0, w: 50, h:70};\n    const cols = 5;\n    const rows = 8;  // 8 rows but only 7 visible\n    const cells = [];\n    const cellTexture = PIXI.Texture.from('assets/cell.png');\n    const okTexture = PIXI.Texture.from('assets/ok.png');\n    const nokTexture = PIXI.Texture.from('assets/nok.png');\n    const ok = new PIXI.Sprite(okTexture);\n    const nok = new PIXI.Sprite(nokTexture);\n    const highlight = Highlight({offset, ok, nok, unit});\n    let isAnimating = false;\n\n\n    stage.addChild(ok);\n    stage.addChild(nok);\n\n    const normalize = () => {\n        pos.x = offset.x + unit.size*5;\n        pos.y = offset.y + unit.size*10;\n        pos.w = unit.size*50;\n        pos.h = unit.size*70;\n    }\n\n    normalize();\n\n    for (let row = 0; row < rows; row++) {\n        cells.push([]);\n        for (let col = 0; col < cols; col++) {\n            cells[row].push(Cell({stage, pos, unit, col, row, cellTexture}));\n        }\n    }\n\n    const lastRow = cells[rows-1];\n\n    lastRow.forEach(cell => cell.hide());\n\n    const resize = () => {\n        normalize();\n        highlight.normalize();\n        cells.forEach(row => row.forEach(cell => cell.resize()));\n    };\n\n    const colOnGrid = (mpos) => {\n        return (\n            mpos.x >= pos.x &&\n            mpos.x <= pos.x + pos.w &&\n            mpos.y >= pos.y &&\n            mpos.y <= pos.y + pos.h\n        ) ? Math.floor((mpos.x - pos.x) / (10*unit.size)) : null;\n    }\n\n    const colOkNok = (col, tile) => {\n        if (col === null) {\n            return ok;\n        }\n        let cell;\n        for (const row of cells) {\n            if (row === lastRow) {\n                break;\n            }\n            cell = row[col];\n            if (cell === undefined) {\n                console.log(col);\n            }\n            if (cell.isEmpty()) {\n                return ok;\n            }\n        }\n        return cell.getIndex() === tile.index ? ok : nok;\n    }\n\n    const select = (mpos, tile) => {\n        if (tile === null) {\n            return;\n        }\n        const col = colOnGrid(mpos);\n        highlight.update(col, colOkNok(col, tile));\n    }\n\n    const final = (mpos, tile, cb) => {\n        const col = colOnGrid(mpos);\n        highlight.update(null);\n        if (col !== null && tile && colOkNok(col, tile) === ok) {\n            cb(col);\n        }\n    }\n\n    const getScore = () => cells.reduce((total, row) => row.reduce((total, cell) => total + cell.getValue(), total), 0)\n\n    const cellsToAnimate = [];\n    const colsMoved = Array(cols).fill(false);\n\n    const processGrid = () => {\n        // we never destoy cells, so do not care about references\n        cellsToAnimate.length = 0;\n\n        // update the score\n        score.update(getScore());\n\n        // calculate if tiles need to move up...\n        const toList = Array(cols).fill(0);\n        for (let r = 0; r < cells.length; r++) {\n            const row = cells[r];\n            for(let i = 0; i < row.length; ++i) {\n                const cell = row[i];\n                if (cell.isEmpty()) {\n                    toList[i] += 1;\n                } else {\n                    const n = toList[i];\n                    if (n > 0) {\n                        colsMoved[i] = true;\n                        cell.moveTileUp(cells[r-n][i]);\n                        cellsToAnimate.push(cell);\n                    }\n                }\n            }\n        }\n\n        if (cellsToAnimate.length) {\n            return;\n        }\n        console.log('Merge check...', colsMoved);\n\n        // Merge\n        for (let i = 0; i < colsMoved.length; i++) {\n            if (colsMoved[i] === false) {\n                continue;  // skipt cols which are not moved\n            }\n            for (let r = 0; r < rows-1; r++) {\n                const cell = cells[r][i];\n\n                if (cell.isEmpty()) {\n                    break;  // done with this row\n                }\n\n                console.log(\"Cell index to check: \", r, i, cell.getIndex());\n\n                const cellsToCheck = [\n                    {direction: \"right\", ce: i > 0 ? cells[r][i-1] : null},\n                    {direction: \"left\", ce: i < cols-1 ? cells[r][i+1] : null},\n                    {direction: \"up\", ce: cells[r+1][i]}\n                ];\n\n                console.log('toCheck: ', cellsToCheck);\n\n                cellsToCheck.forEach(({direction, ce}) => {\n                    if (ce !== null && !ce.isEmpty() && ce.getIndex() === cell.getIndex()) {\n                        console.log('Animate merge: ', direction, ce.row, ' to ', cell.row);\n                        if (direction === \"up\") {\n                            cell.mergeTile(ce, direction);\n                            cellsToAnimate.push(cell);\n                        } else {\n                            ce.mergeTile(cell, direction);\n                            cellsToAnimate.push(ce);\n                        }\n                    }\n\n                });\n            }\n        }\n\n        if (cellsToAnimate.length) {\n            return;\n        }\n\n        // done, get the next tile and reset moved cols\n        colsMoved.fill(false);\n        tiles.newTile(0);\n    };\n\n    const animate = () => {\n        isAnimating = false;\n        for (const cell of cellsToAnimate) {\n            if (cell.animate() === false) {\n                isAnimating = true;  // not finished animating\n            }\n        }\n        if (!isAnimating && cellsToAnimate.length > 0) {\n            // just finished animating, check for more\n            processGrid();\n        }\n    }\n\n    const addTile = (tile, col) => {\n        const cell = lastRow[col];\n        cell.setTile(tile);\n        colsMoved[col] = true;\n        processGrid();\n    }\n\n    return {\n        // draw: draw,\n        resize,\n        select,\n        move: select,\n        final,\n        addTile,\n        animate,\n        getScore,\n    }\n};\n\nexport default Grid;","import * as PIXI from \"pixi.js\";\n\nconst Tile = (state) => {\n    const {index, allTiles, str, color, unit} = state;\n    const value = 2<<index;\n    const container = new PIXI.Container();\n    var blur = new PIXI.filters.BlurFilter(1);\n    const graphics = new PIXI.Graphics();\n    graphics.filters = [blur];\n\n    const style = new PIXI.TextStyle({\n        fontFamily: 'Arial',\n        fontSize: 32,\n        fontWeight: 'bold',\n        fill: '#ffffff',\n        align : 'center',\n        stroke: '#ffffff',\n        strokeThickness: 2,\n        lineJoin: 'round',\n    });\n\n    console.log(color);\n\n    const text = new PIXI.Text(str, style);\n\n    const normalize = (isSmall) => {\n        const size = isSmall === true ? 7*unit.size : 10*unit.size;\n        graphics.clear();\n        graphics.lineStyle(0, color, 1);\n        graphics.beginFill(color, 1);\n        graphics.drawRoundedRect(1, 1, size-2, size-2, 0.5*unit.size);\n        graphics.endFill();\n        text.style.fontSize = isSmall === true ? 2.6*unit.size : 3.6*unit.size;\n        text.position.x = 0.5*size - text.width/2;\n        text.position.y = 0.27*size;\n    }\n\n    container.addChild(graphics);\n    container.addChild(text);\n\n    normalize();\n\n    return {\n        index,\n        value,\n        container,\n        normalize,\n        dupTile: () => Tile({index, allTiles, str, color, unit}),\n        nextTile: () => {\n            console.log(allTiles, index);\n            return allTiles[index+1].dupTile()\n        },\n        remove: () => container.parent.removeChild(container)\n    };\n}\n\nexport default Tile;\n","import * as PIXI from \"pixi.js\";\nimport Tile from \"./Tile\";\n\nconst Tiles = (state) => {\n    let {offset, stage, unit} = state;\n\n    const tileRange = 6;\n    const allTiles = [];\n    const numTiles = [\n        '2', '4', '8', '16', '32', '64', '128', '256', '512',\n        '1K', '2K', '4K','8K', '16K', '32K', '64K', '128K', '256K', '512K',\n        '1M', '2M', '4M','8M', '16M', '32M', '64M', '128M', '256M', '512M',\n        '1T', '2T', '4T','8T', '16T', '32T', '64T', '128T', '256T', '512T',\n        '1P', '2P', '4P','8P', '16P', '32P', '64P', '128P', '256P', '512P',\n    ];\n    const rasterTexture = PIXI.Texture.from(\"assets/raster.png\");\n    const currentRaster = new PIXI.Sprite(rasterTexture);\n    const nextRaster = new PIXI.Sprite(rasterTexture);\n\n    const randColor = (index) => {\n        console.log(!!(index&1));\n        const red = (Math.floor(Math.random() * 0x50) + ((index&1)?0x20:0x70)) << 16;\n        const green = (Math.floor(Math.random() * 0x50) + ((index&2)?0x20:0x70)) << 8;\n        const blue = (Math.floor(Math.random() * 0x50) + ((index&4)?0x20:0x70)) << 0;\n\n        return red+green+blue;\n    }\n\n    for (let index = 0; index < numTiles.length; ++index) {\n        const color = randColor(index);\n        const str = numTiles[index];\n        console.log('index: ', index, color.toString(16).padStart(6, 0));\n        allTiles.push(Tile({index, allTiles, str, color, unit}));\n    }\n\n    const renderTiles = () => {\n        let i = 0;\n        for (const tile of allTiles) {\n            stage.addChild(tile.container);\n            tile.container.position.x = 100*Math.floor(i/8);\n            tile.container.position.y = 100*Math.floor(i%8);\n            i++;\n        }\n    }\n\n    const getRandomTile = (mi) => {\n        // Update mi\n        mi = current && current.index < mi ? current.index : 0;\n        mi = next && next.index < mi ? next.index : mi;\n\n        const idx = Math.floor(Math.random() * tileRange) + mi;\n        return allTiles[idx].dupTile();\n    }\n\n    let current = null;\n    let next = null;\n\n    const normalizeTiles = () => {\n        if (current) {\n            current.container.position.x = offset.x + unit.size*25;\n            current.container.position.y = offset.y + unit.size*85;\n            current.normalize();\n        }\n        next.container.position.x = offset.x + unit.size*36.5;\n        next.container.position.y = offset.y + unit.size*86.5;\n        next.normalize(true);\n    }\n\n    const normalize = () => {\n        currentRaster.position.x = offset.x + unit.size*24;\n        currentRaster.position.y = offset.y + unit.size*84;\n        currentRaster.width = unit.size*12;\n        currentRaster.height = unit.size*12;\n\n        nextRaster.position.x = offset.x + unit.size*36;\n        nextRaster.position.y = offset.y + unit.size*86;\n        nextRaster.width = unit.size*8;\n        nextRaster.height = unit.size*8;\n\n        normalizeTiles();\n    }\n\n    const newTile = (mi) => {\n        current = next;\n        next = getRandomTile(mi);\n        console.log(next);\n        stage.addChild(next.container);\n        normalizeTiles();\n    };\n\n    stage.addChild(currentRaster);\n    stage.addChild(nextRaster);\n\n    return {\n        renderTiles,\n        newTile,\n        getCurrentTile: () => current,\n        stealCurrentTile: () => {\n            const tile = current;\n            current = null;\n            return tile;\n        },\n        resize: normalize,\n    }\n};\n\nexport default Tiles;","import * as PIXI from \"pixi.js\";\n\nconst Score = (state) => {\n    const {offset, stage, unit} = state;\n\n    const style = new PIXI.TextStyle({\n        fontFamily: 'Arial',\n        fontSize: 32,\n        fontStyle: 'italic',\n        fontWeight: 'bold',\n        fill: '#eeeeee',\n        align : 'center',\n        stroke: '#ffffff',\n        strokeThickness: 2,\n        lineJoin: 'round',\n    });\n\n    const text = new PIXI.Text((0).toLocaleString(), style);\n\n    const normalize = () => {\n        text.x = offset.x + 30*unit.size - text.width/2;\n        text.y = offset.y + 1*unit.size;\n    }\n\n    stage.addChild(text);\n\n    return {\n        resize: normalize,\n        update: (score) => {\n            const str = (score).toLocaleString();\n            console.log('update score: ', score);\n            text.text = str;\n            normalize();\n        }\n    };\n}\n\nexport default Score;\n","import './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport Game from \"./Game\";\n\nconst game = Game({\n    container: document.body\n});\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n\nwindow.addEventListener('resize', game.resize);\n\ngame.animate();\n","import * as PIXI from \"pixi.js\";\nimport Grid from \"./Grid\";\nimport Tiles from \"./Tiles\";\nimport Score from \"./Score\";\n\n/*\n\n0 1 2 3  4  5  6   7   8   9  10 11 12 13\n2 4 8 16 32 64 128 256 512 1K 2K 4K 8K 16K\n\ninitial tiles: 0..5\ninitial goal:\n\n\n*/\n\nconst Game = (state) => {\n    let container = state.container;\n    let unit = {size: 10}, offset = {x: 0, y: 0};\n\n    const app = new PIXI.Application({\n        width: window.innerWidth,\n        height: window.innerHeight\n    });\n\n    // Add the canvas that Pixi automatically created for you to the HTML document\n    container.appendChild(app.view);\n\n    // Configure app\n    app.renderer.view.style.position = \"absolute\";\n    app.renderer.view.style.display = \"block\";\n    app.renderer.view.style.backgroundColor = \"#823456\";\n    app.renderer.autoResize = true;\n\n    const stage = new PIXI.Container();\n\n    stage.interactive = true;\n\n    const onPointerDown = (event) => {\n        const pos = event.data.getLocalPosition(stage);\n        grid.select(pos, tiles.getCurrentTile());\n    };\n\n    const onPointerMove = (event) => {\n        const pos = event.data.getLocalPosition(stage);\n        grid.move(pos, tiles.getCurrentTile());\n    };\n\n    const placeTile = (col) => {\n        const tile = tiles.stealCurrentTile();\n        if (!tile) {\n            return;\n        }\n\n        grid.addTile(tile, col);\n        score.update(grid.getScore());\n\n        grid.animate()\n    }\n\n    const onPointerUp = (event) => {\n        const pos = event.data.getLocalPosition(stage);\n        grid.final(pos, tiles.getCurrentTile(), placeTile);\n    };\n\n    stage\n        .on('pointerdown', onPointerDown)\n        .on('pointermove', onPointerMove)\n        .on('pointerup', onPointerUp);\n\n    const normalize = () => {\n        let ww = window.innerWidth;\n        let wh = window.innerHeight;\n        let nh = wh * (6/10);\n\n        if (ww < nh) {\n            unit.size = ww / 60;\n            offset.x = 0;\n            offset.y = (wh - (unit.size * 100)) / 2;\n        } else {\n            unit.size = wh / 100;\n            offset.x = (ww - (unit.size * 60)) / 2;;\n            offset.y = 0;\n        }\n    }\n\n    const tiles = Tiles({offset, stage, unit});\n    const score = Score({offset, stage, unit});\n    const grid = Grid({unit, offset, stage, score, tiles});\n\n    tiles.newTile(0);\n    tiles.newTile(0);\n\n    const animate = () => {\n        requestAnimationFrame(animate);\n\n        grid.animate();\n\n        app.renderer.render(stage);\n    }\n\n    // tiles.renderTiles();\n\n    normalize();\n    grid.resize();\n    tiles.resize();\n    score.resize();\n\n    return {\n        resize: () => {\n            normalize();\n            score.resize();\n            grid.resize();\n            tiles.resize();\n            app.renderer.resize(window.innerWidth, window.innerHeight);\n        },\n        animate: animate\n    }\n};\n\n\nexport default Game;"],"sourceRoot":""}